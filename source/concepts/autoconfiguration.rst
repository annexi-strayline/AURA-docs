Autoconfiguration
=================

One common need for broadly distributed portable code "packages" is the configuration of various platform-dependent values.

The design intent is for this kind of platform-specific configuration process to be as integrated as possible, and not simply pull from existing C/UNIX-oriented autoconfiguration systems like Autotools, Ninja/CMAKE, etc.

To this end, all AURA auto-configuration happens among a special AURA-specific Ada subsystem which contains all AURA subsystem configuration, platform information, and repository configuration, within normal Ada packages.

The AURA Subsystem
------------------

All configuration and autoconfiguration is carried out through the packages that constitute the AURA subsystem.

The root package (package AURA) is automatically generated by the AURA implementation, has the aspect Pure, and has no body. 

The root package defines the implementation-defined enumeration type Repository_Type that determines the types of :doc:repositories supported by the implementation, as well as a standardized set of platform values.

An example root spec from the reference implementation looks something like this:

.. literalinclude:: snippets/aura.ads
  :language: ada
  :caption: aura.ads

Any AURA subsystem can with the AURA root package to gain access to these values, and use these to configure different parts of codebase, based on the platform the subsystem gets built on.

Of course there are limitations to how much of this configuration can be done from within Ada, particularly when including non-Ada sources. To handle these situations, AURA specifies a rich *autoconfiguration* mechanism that allows AURA subsystems to self-configure on build.

User Configuration
------------------

The principle mechanism that both enables subsystem autoconfiguration, as well as user configuration, is the :doc:`manifest <manifests>`.

Each subsystem has either an implicit or explicit manifest package that is instantiated in the project root as a child of the AURA package with the same name as the subsystem being checked-out. This package is a regular Ada package specification that presents any user-configurable parameters to the user, as well as giving access to the AURA root package containing the platform information.

This installed *manifest* is known as the *configuration package*, and is used to configure the subsystem during build. See the next section for more details on the structure, contents, and function of subsystem manifests.


