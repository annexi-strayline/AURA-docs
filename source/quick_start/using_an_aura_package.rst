Using An AURA Package
=====================

The classic "hello world" example is pretty exciting the first time, but it gets old pretty quick.

Let's add a bit of flair by making the text more colorful and more bold.

To do that, we'll use a third-party subsystem package called "CLI", from ANNEXI-STRAYLINE's ASAP repository.

Using a Third-Party Subsystem
-----------------------------

Let's modify **hello.adb** to use the CLI third-party subsystem package from ANNEXI-STRAYLINE's ASAP repo. This package gives us a bunch of tools for making more effective CLI applications.

.. literalinclude:: snippets/hello.2.adb
    :language: ada
    :linenos:

If we run ``aura run hello`` now, the AURA CLI will complain that it cannot find the missing subsystem for "cli".

Lets fix this by adding the ANNEXI-STRAYLINE ASAP repository.

Adding a Repository
-------------------

.. note::

    Repository management is planned to be integrated into the AURA CLI in the future, but at the present time, repositories must be managed independently.

    As we will see, this is really not difficult!

Repositories are defined by simple Ada package specifications. Repository 1 is a special repository that is automatically generated by the AURA cli and basically refers to the project itself.

.. seealso::

    To learn more about how AURA repositories work, and what is special about Repository 1, please see the :doc:`<../concepts/repositories>` explainer.

Lets create the repository for AURA by creating the **aura-repository_2.ads** package spec:

.. literalinclude:: snippets/aura-repository_2.ads
    :language: ada
    :linenos:

Now lets re-run the aura cli:

.. prompt:: bash $

    aura run hello

AURA will register the new repository. notice the new subsystem dependency on cli, and search the repositories for a match, and will copy the subsystem into a subdirectory in the project root.

.. figure:: /_static/images/quick_start/runhello2.png
    :target: /_static/images/quick_start/runhello2.png
    :align: center

